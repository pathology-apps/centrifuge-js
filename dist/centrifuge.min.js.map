{"version":3,"sources":["webpack://Centrifuge/webpack/universalModuleDefinition","webpack://Centrifuge/./src/centrifuge.js","webpack://Centrifuge/./src/index.js","webpack://Centrifuge/./src/json.js","webpack://Centrifuge/./src/subscription.js","webpack://Centrifuge/./src/utils.js","webpack://Centrifuge/./node_modules/events/events.js","webpack://Centrifuge/webpack/bootstrap","webpack://Centrifuge/webpack/startup","webpack://Centrifuge/webpack/runtime/global"],"names":["root","factory","exports","module","define","amd","this","_errorTimeout","_errorConnectionClosed","Centrifuge","url","options","_url","_websocket","_sockjs","_isSockjs","_xmlhttprequest","_binary","_methodType","_pushType","_encoder","_decoder","_status","_reconnect","_reconnecting","_transport","_transportName","_transportClosed","_messageId","_clientID","_refreshRequired","_subs","_serverSubs","_lastSeq","_lastGen","_lastOffset","_lastEpoch","_messages","_isBatching","_isSubscribeBatching","_privateChannels","_numRefreshFailed","_refreshTimeout","_pingTimeout","_pongTimeout","_subRefreshTimeouts","_retries","_callbacks","_latency","_latencyStart","_connectData","_token","_xhrID","_xhrs","_dispatchPromise","Promise","resolve","_config","debug","name","version","websocket","sockjs","xmlhttprequest","middleware","minRetry","maxRetry","timeout","ping","pingInterval","pongWaitTimeout","privateChannelPrefix","onTransportClose","sockjsServer","sockjsTransports","refreshEndpoint","refreshHeaders","refreshParams","refreshData","refreshAttempts","refreshInterval","onRefreshFailed","onRefresh","subscribeEndpoint","subscribeHeaders","subscribeParams","subRefreshInterval","onPrivateSubscribe","disableWithCredentials","_configure","token","data","headers","params","fns","callback","xhr","query","i","_debug","JSON","stringify","global","XMLHttpRequest","ActiveXObject","hasOwnProperty","length","encodeURIComponent","headerName","open","withCredentials","setRequestHeader","onreadystatechange","readyState","status","parsed","parse","responseText","e","error","_log","setTimeout","send","log","arguments","WebSocket","format","_formatOverride","Error","JsonMethodType","JsonPushType","JsonEncoder","JsonDecoder","configuration","extend","startsWith","indexOf","_setFormat","SockJS","newStatus","interval","backoff","xhrID","abort","reconnect","id","_stopPing","callbacks","clearTimeout","errback","_createErrorObject","channel","sub","_isSuccess","_triggerUnsubscribe","_recover","_shouldResubscribe","_setSubscribing","_setUnsubscribed","_abortInflightXHRs","_clearSubRefreshTimeout","transport","OPEN","commands","_isTransportOpen","command","encodeCommands","sockjsOptions","transports","server","_websocketSupported","binaryType","onopen","onheartbeat","_restartPing","msg","subs","hasSubs","recoverable","seq","gen","offset","epoch","Date","_call","then","resolveCtx","_connectResponse","decodeCommandResult","CONNECT","result","next","rejectCtx","code","_disconnect","onerror","onclose","closeEvent","reason","needReconnect","advice","event","_getRetryInterval","_refresh","_connect","onmessage","_dataReceived","_rpc","method","RPC","_methodCall","SEND","isConnected","_transportSend","reject","undefined","since","limit","resultCB","PUBLISH","_getHistoryParams","HISTORY","publications","PRESENCE","presence","PRESENCE_STATS","num_users","num_clients","replies","decodeReplies","finishDispatch","_dispatchSynchronized","Array","isArray","forEach","mw","p","_hookMiddleware","_dispatchReply","reply","_handleReply","_handlePush","_addMessage","_registerCall","_setStatus","_setupTransport","shouldReconnect","_isDisconnected","_clearConnectedState","emit","close","_refreshFailed","clientID","_newXHRID","cb","resp","jitter","Math","round","random","max","REFRESH","_refreshResponse","_refreshError","_ajax","err","expires","client","_getTTLMilliseconds","ttl","channelsData","channels","channelData","SUB_REFRESH","_getSub","_subRefreshResponse","_subRefreshError","subRefreshTimeout","_subRefresh","isResubscribe","SUBSCRIBE","startSubscribeBatching","_subscribe","stopSubscribeBatching","recover","_needRecover","_getLastSeq","_getLastGen","_getLastOffset","_getLastEpoch","_subscribeResponse","_subscribeError","_setNew","UNSUBSCRIBE","min","isRecover","wasReconnecting","_resetRetry","getTime","startBatching","stopBatching","_startPing","ctx","latency","_processServerSubs","subCtx","_expandSubscribeContext","recovered","pubs","reverse","_handlePublication","_isSubscribing","message","_setSubscribeError","positioned","streamPosition","_setSubscribeSuccess","_recoverable","errorExists","join","info","_isServerSub","leave","unsub","unsubscribe","resubscribe","subscribe","pub","push","decodePush","type","PUBLICATION","decodePushData","MESSAGE","_handleMessage","JOIN","_handleJoin","LEAVE","_handleLeave","UNSUB","_handleUnsub","SUB","_handleSub","messages","slice","PING","_pingResponse","isFunction","_nextMessageId","_isConnected","_ping","_flush","authChannels","batch","events","currentSub","_setEvents","_isUnsubscribed","Subscription","EventEmitter","map","c","split","filter","r","methodType","pushType","centrifuge","_centrifuge","_error","_isResubscribe","_ready","_subscriptionPromise","_noResubscribe","_initializePromise","_promises","_promiseId","on","errContext","_resolve","value","_reject","Object","prototype","toString","call","knownEvents","l","ev","subscribeResult","successContext","_getSubscribeSuccessContext","_getSubscribeErrorContext","noResubscribe","needTrigger","subscribeErrorContext","_unsubscribe","_isError","res","rej","_nextPromiseId","self","publish","presenceStats","history","prefix","lastIndexOf","level","args","console","logger","apply","step","pow","floor","a","b","key","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","init","once","emitter","eventListener","errorListener","removeListener","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","prepend","m","existing","warning","create","newListener","unshift","warned","w","String","count","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","n","copy","defineProperty","enumerable","get","set","arg","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","handler","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","keys","rawListeners","eventNames","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","g","globalThis","window"],"mappings":"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","file":"centrifuge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Centrifuge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Centrifuge\"] = factory();\n\telse\n\t\troot[\"Centrifuge\"] = factory();\n})(this, function() {\nreturn ","import EventEmitter from 'events';\nimport Subscription from './subscription';\n\nimport {\n  JsonEncoder,\n  JsonDecoder,\n  JsonMethodType,\n  JsonPushType\n} from './json';\n\nimport {\n  isFunction,\n  log,\n  startsWith,\n  errorExists,\n  backoff,\n  extend\n} from './utils';\n\nconst _errorTimeout = 'timeout';\nconst _errorConnectionClosed = 'connection closed';\n\nexport class Centrifuge extends EventEmitter {\n\n  constructor(url, options) {\n    super();\n    this._url = url;\n    this._websocket = null;\n    this._sockjs = null;\n    this._isSockjs = false;\n    this._xmlhttprequest = null;\n    this._binary = false;\n    this._methodType = null;\n    this._pushType = null;\n    this._encoder = null;\n    this._decoder = null;\n    this._status = 'disconnected';\n    this._reconnect = true;\n    this._reconnecting = false;\n    this._transport = null;\n    this._transportName = null;\n    this._transportClosed = true;\n    this._messageId = 0;\n    this._clientID = null;\n    this._refreshRequired = false;\n    this._subs = {};\n    this._serverSubs = {};\n    this._lastSeq = {};\n    this._lastGen = {};\n    this._lastOffset = {};\n    this._lastEpoch = {};\n    this._messages = [];\n    this._isBatching = false;\n    this._isSubscribeBatching = false;\n    this._privateChannels = {};\n    this._numRefreshFailed = 0;\n    this._refreshTimeout = null;\n    this._pingTimeout = null;\n    this._pongTimeout = null;\n    this._subRefreshTimeouts = {};\n    this._retries = 0;\n    this._callbacks = {};\n    this._latency = null;\n    this._latencyStart = null;\n    this._connectData = null;\n    this._token = null;\n    this._xhrID = 0;\n    this._xhrs = {};\n    this._dispatchPromise = Promise.resolve();\n    this._config = {\n      debug: false,\n      name: '',\n      version: '',\n      websocket: null,\n      sockjs: null,\n      xmlhttprequest: null,\n      middleware: [],\n      minRetry: 1000,\n      maxRetry: 20000,\n      timeout: 5000,\n      ping: true,\n      pingInterval: 25000,\n      pongWaitTimeout: 5000,\n      privateChannelPrefix: '$',\n      onTransportClose: null,\n      sockjsServer: null,\n      sockjsTransports: [\n        'websocket',\n        'xdr-streaming',\n        'xhr-streaming',\n        'eventsource',\n        'iframe-eventsource',\n        'iframe-htmlfile',\n        'xdr-polling',\n        'xhr-polling',\n        'iframe-xhr-polling',\n        'jsonp-polling'\n      ],\n      refreshEndpoint: '/centrifuge/refresh',\n      refreshHeaders: {},\n      refreshParams: {},\n      refreshData: {},\n      refreshAttempts: null,\n      refreshInterval: 1000,\n      onRefreshFailed: null,\n      onRefresh: null,\n      subscribeEndpoint: '/centrifuge/subscribe',\n      subscribeHeaders: {},\n      subscribeParams: {},\n      subRefreshInterval: 1000,\n      onPrivateSubscribe: null,\n      disableWithCredentials: false\n    };\n    this._configure(options);\n  }\n\n  setToken(token) {\n    this._token = token;\n  }\n\n  setConnectData(data) {\n    this._connectData = data;\n  }\n\n  setRefreshHeaders(headers) {\n    this._config.refreshHeaders = headers;\n  }\n  setRefreshParams(params) {\n    this._config.refreshParams = params;\n  }\n  setRefreshData(data) {\n    this._config.refreshData = data;\n  }\n\n  setSubscribeHeaders(headers) {\n    this._config.subscribeHeaders = headers;\n  }\n  setSubscribeParams(params) {\n    this._config.subscribeParams = params;\n  }\n  setMiddleware(...fns) {\n    this._config.middleware = fns;\n  }\n\n  _ajax(url, params, headers, data, callback) {\n    let query = '';\n    this._debug('sending AJAX request to', url, 'with data', JSON.stringify(data));\n\n    let xhr;\n    if (this._xmlhttprequest !== null) {\n      // use explicitly passed XMLHttpRequest object.\n      xhr = new this._xmlhttprequest();\n    } else {\n      xhr = (global.XMLHttpRequest ? new global.XMLHttpRequest() : new global.ActiveXObject('Microsoft.XMLHTTP'));\n    }\n\n    for (const i in params) {\n      if (params.hasOwnProperty(i)) {\n        if (query.length > 0) {\n          query += '&';\n        }\n        query += encodeURIComponent(i) + '=' + encodeURIComponent(params[i]);\n      }\n    }\n    if (query.length > 0) {\n      query = '?' + query;\n    }\n    xhr.open('POST', url + query, true);\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !this._config.disableWithCredentials;\n    }\n\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    for (const headerName in headers) {\n      if (headers.hasOwnProperty(headerName)) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n      }\n    }\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          let data, parsed = false;\n          try {\n            data = JSON.parse(xhr.responseText);\n            parsed = true;\n          } catch (e) {\n            callback({\n              error: 'Invalid JSON. Data was: ' + xhr.responseText,\n              status: 200,\n              data: null\n            });\n          }\n          if (parsed) { // prevents double execution.\n            callback({\n              data: data,\n              status: 200\n            });\n          }\n        } else {\n          this._log('wrong status code in AJAX response', xhr.status);\n          callback({\n            status: xhr.status,\n            data: null\n          });\n        }\n      }\n    };\n    setTimeout(() => xhr.send(JSON.stringify(data)), 20);\n    return xhr;\n  };\n\n  _log() {\n    log('info', arguments);\n  };\n\n  _debug() {\n    if (this._config.debug === true) {\n      log('debug', arguments);\n    }\n  };\n\n  _websocketSupported() {\n    if (this._config.websocket !== null) {\n      return true;\n    }\n    return !(typeof WebSocket !== 'function' && typeof WebSocket !== 'object');\n  };\n\n  _setFormat(format) {\n    if (this._formatOverride(format)) {\n      return;\n    }\n    if (format === 'protobuf') {\n      throw new Error('not implemented by JSON only Centrifuge client – use client with Protobuf');\n    }\n    this._binary = false;\n    this._methodType = JsonMethodType;\n    this._pushType = JsonPushType;\n    this._encoder = new JsonEncoder();\n    this._decoder = new JsonDecoder();\n  }\n\n  _formatOverride(format) {\n    return false;\n  }\n\n  _configure(configuration) {\n    if (!('Promise' in global)) {\n      throw new Error('Promise polyfill required');\n    }\n\n    extend(this._config, configuration || {});\n    this._debug('centrifuge config', this._config);\n\n    if (!this._url) {\n      throw new Error('url required');\n    }\n\n    if (startsWith(this._url, 'ws') && this._url.indexOf('format=protobuf') > -1) {\n      this._setFormat('protobuf');\n    } else {\n      this._setFormat('json');\n    }\n\n    if (startsWith(this._url, 'http')) {\n      this._debug('client will try to connect to SockJS endpoint');\n      if (this._config.sockjs !== null) {\n        this._debug('SockJS explicitly provided in options');\n        this._sockjs = this._config.sockjs;\n      } else {\n        if (typeof global.SockJS === 'undefined') {\n          throw new Error('SockJS not found, use ws:// in url or include SockJS');\n        }\n        this._debug('use globally defined SockJS');\n        this._sockjs = global.SockJS;\n      }\n    } else {\n      this._debug('client will connect to websocket endpoint');\n    }\n\n    this._xmlhttprequest = this._config.xmlhttprequest;\n  };\n\n  _setStatus(newStatus) {\n    if (this._status !== newStatus) {\n      this._debug('Status', this._status, '->', newStatus);\n      this._status = newStatus;\n    }\n  };\n\n  _isDisconnected() {\n    return this._status === 'disconnected';\n  };\n\n  _isConnecting() {\n    return this._status === 'connecting';\n  };\n\n  _isConnected() {\n    return this._status === 'connected';\n  };\n\n  _nextMessageId() {\n    return ++this._messageId;\n  };\n\n  _resetRetry() {\n    this._debug('reset retries count to 0');\n    this._retries = 0;\n  };\n\n  _getRetryInterval() {\n    const interval = backoff(this._retries, this._config.minRetry, this._config.maxRetry);\n\n    this._retries += 1;\n    return interval;\n  };\n\n  _abortInflightXHRs() {\n    for (const xhrID in this._xhrs) {\n      try {\n        this._xhrs[xhrID].abort();\n      } catch (e) {\n        this._debug('error aborting xhr', e);\n      }\n      delete this._xhrs[xhrID];\n    }\n  };\n\n  _clearConnectedState(reconnect) {\n    this._clientID = null;\n    this._stopPing();\n\n    // fire errbacks of registered outgoing calls.\n    for (const id in this._callbacks) {\n      if (this._callbacks.hasOwnProperty(id)) {\n        const callbacks = this._callbacks[id];\n        clearTimeout(callbacks.timeout);\n        const errback = callbacks.errback;\n        if (!errback) {\n          continue;\n        }\n        errback({error: this._createErrorObject('disconnected')});\n      }\n    }\n    this._callbacks = {};\n\n    // fire unsubscribe events\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n\n        if (reconnect) {\n          if (sub._isSuccess()) {\n            sub._triggerUnsubscribe();\n            sub._recover = true;\n          }\n          if (sub._shouldResubscribe()) {\n            sub._setSubscribing();\n          }\n        } else {\n          sub._setUnsubscribed();\n        }\n      }\n    }\n\n    this._abortInflightXHRs();\n\n    // clear refresh timer\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    // clear sub refresh timers\n    for (const channel in this._subRefreshTimeouts) {\n      if (this._subRefreshTimeouts.hasOwnProperty(channel) && this._subRefreshTimeouts[channel]) {\n        this._clearSubRefreshTimeout(channel);\n      }\n    }\n    this._subRefreshTimeouts = {};\n\n    if (!this._reconnect) {\n      // completely clear subscriptions\n      this._subs = {};\n    }\n  };\n\n  _isTransportOpen() {\n    if (this._isSockjs) {\n      return this._transport &&\n        this._transport.transport &&\n        this._transport.transport.readyState === this._transport.transport.OPEN;\n    }\n    return this._transport && this._transport.readyState === this._transport.OPEN;\n  };\n\n  _transportSend(commands) {\n    if (!commands.length) {\n      return true;\n    }\n\n    if (!this._isTransportOpen()) {\n      // resolve pending commands with error if transport is not open\n      for (let command in commands) {\n        let id = command.id;\n        if (!(id in this._callbacks)) {\n          continue;\n        }\n        const callbacks = this._callbacks[id];\n        clearTimeout(this._callbacks[id].timeout);\n        delete this._callbacks[id];\n        const errback = callbacks.errback;\n        errback({error: this._createErrorObject(_errorConnectionClosed, 0)});\n      }\n      return false;\n    }\n    this._transport.send(this._encoder.encodeCommands(commands));\n    return true;\n  }\n\n  _setupTransport() {\n    this._isSockjs = false;\n\n    // detect transport to use - SockJS or Websocket\n    if (this._sockjs !== null) {\n      const sockjsOptions = {\n        transports: this._config.sockjsTransports\n      };\n\n      if (this._config.sockjsServer !== null) {\n        sockjsOptions.server = this._config.sockjsServer;\n      }\n      this._isSockjs = true;\n      this._transport = new this._sockjs(this._url, null, sockjsOptions);\n    } else {\n      if (!this._websocketSupported()) {\n        this._debug('No Websocket support and no SockJS configured, can not connect');\n        return;\n      }\n      if (this._config.websocket !== null) {\n        this._websocket = this._config.websocket;\n      } else {\n        this._websocket = WebSocket;\n      }\n      this._transport = new this._websocket(this._url);\n      if (this._binary === true) {\n        this._transport.binaryType = 'arraybuffer';\n      }\n    }\n\n    this._transport.onopen = () => {\n      this._transportClosed = false;\n\n      if (this._isSockjs) {\n        this._transportName = 'sockjs-' + this._transport.transport;\n        this._transport.onheartbeat = () => this._restartPing();\n      } else {\n        this._transportName = 'websocket';\n      }\n\n      // Can omit method here due to zero value.\n      const msg = {\n        // method: this._methodType.CONNECT\n      };\n\n      if (this._token || this._connectData || this._config.name || this._config.version) {\n        msg.params = {};\n      }\n      if (this._token) {\n        msg.params.token = this._token;\n      }\n      if (this._connectData) {\n        msg.params.data = this._connectData;\n      }\n      if (this._config.name) {\n        msg.params.name = this._config.name;\n      }\n      if (this._config.version) {\n        msg.params.version = this._config.version;\n      }\n\n      let subs = {};\n      let hasSubs = false;\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel) && this._serverSubs[channel].recoverable) {\n          hasSubs = true;\n          let sub = {\n            'recover': true\n          };\n          if (this._serverSubs[channel].seq || this._serverSubs[channel].gen) {\n            if (this._serverSubs[channel].seq) {\n              sub['seq'] = this._serverSubs[channel].seq;\n            }\n            if (this._serverSubs[channel].gen) {\n              sub['gen'] = this._serverSubs[channel].gen;\n            }\n          } else {\n            if (this._serverSubs[channel].offset) {\n              sub['offset'] = this._serverSubs[channel].offset;\n            }\n          }\n          if (this._serverSubs[channel].epoch) {\n            sub['epoch'] = this._serverSubs[channel].epoch;\n          }\n          subs[channel] = sub;\n        }\n      }\n      if (hasSubs) {\n        if (!msg.params) {msg.params = {};}\n        msg.params.subs = subs;\n      }\n\n      this._latencyStart = new Date();\n      this._call(msg).then(resolveCtx => {\n        this._connectResponse(this._decoder.decodeCommandResult(this._methodType.CONNECT, resolveCtx.result), hasSubs);\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        const err = rejectCtx.error;\n        if (err.code === 109) { // token expired.\n          this._refreshRequired = true;\n        }\n        this._disconnect('connect error', true);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    this._transport.onerror = error => {\n      this._debug('transport level error', error);\n    };\n\n    this._transport.onclose = closeEvent => {\n      this._transportClosed = true;\n      let reason = _errorConnectionClosed;\n      let needReconnect = true;\n\n      if (closeEvent && 'reason' in closeEvent && closeEvent.reason) {\n        try {\n          const advice = JSON.parse(closeEvent.reason);\n          this._debug('reason is an advice object', advice);\n          reason = advice.reason;\n          needReconnect = advice.reconnect;\n        } catch (e) {\n          reason = closeEvent.reason;\n          this._debug('reason is a plain string', reason);\n        }\n      }\n\n      // onTransportClose callback should be executed every time transport was closed.\n      // This can be helpful to catch failed connection events (because our disconnect\n      // event only called once and every future attempts to connect do not fire disconnect\n      // event again).\n      if (this._config.onTransportClose !== null) {\n        this._config.onTransportClose({\n          event: closeEvent,\n          reason: reason,\n          reconnect: needReconnect\n        });\n      }\n\n      this._disconnect(reason, needReconnect);\n\n      if (this._reconnect === true) {\n        this._reconnecting = true;\n        const interval = this._getRetryInterval();\n\n        this._debug('reconnect after ' + interval + ' milliseconds');\n        setTimeout(() => {\n          if (this._reconnect === true) {\n            if (this._refreshRequired) {\n              this._refresh();\n            } else {\n              this._connect();\n            }\n          }\n        }, interval);\n      }\n    };\n\n    this._transport.onmessage = event => {\n      this._dataReceived(event.data);\n    };\n  };\n\n  rpc(data) {\n    return this._rpc('', data);\n  }\n\n  namedRPC(method, data) {\n    return this._rpc(method, data);\n  }\n\n  _rpc(method, data) {\n    let params = {\n      data: data\n    };\n    if (method !== '') {\n      params.method = method;\n    };\n    const msg = {\n      method: this._methodType.RPC,\n      params: params\n    };\n    return this._methodCall(msg, function (result) {\n      return result;\n    });\n  }\n\n  send(data) {\n    const msg = {\n      method: this._methodType.SEND,\n      params: {\n        data: data\n      }\n    };\n\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n\n    const sent = this._transportSend([msg]); // can send async message to server without id set\n    if (!sent) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    };\n    return Promise.resolve({});\n  }\n\n  _getHistoryParams(channel, options) {\n    let params = {\n      channel: channel\n    };\n    if (options !== undefined) {\n      if (options.since) {\n        params['use_since'] = true;\n        if (options.since.offset) {\n          params['offset'] = options.since.offset;\n        }\n        if (options.since.epoch) {\n          params['epoch'] = options.since.epoch;\n        }\n      };\n      if (options.limit !== undefined) {\n        params['use_limit'] = true;\n        params['limit'] = options.limit;\n      }\n    };\n    return params;\n  }\n\n  _methodCall(msg, resultCB) {\n    if (!this.isConnected()) {\n      return Promise.reject(this._createErrorObject(_errorConnectionClosed, 0));\n    }\n    return new Promise((resolve, reject) => {\n      this._call(msg).then(resolveCtx => {\n        resolve(resultCB(this._decoder.decodeCommandResult(msg.method, resolveCtx.result)));\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        reject(rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    });\n  }\n\n  publish(channel, data) {\n    const msg = {\n      method: this._methodType.PUBLISH,\n      params: {\n        channel: channel,\n        data: data\n      }\n    };\n    return this._methodCall(msg, function () {\n      return {};\n    });\n  }\n\n  history(channel, options) {\n    const params = this._getHistoryParams(channel, options);\n    const msg = {\n      method: this._methodType.HISTORY,\n      params: params\n    };\n    return this._methodCall(msg, function (result) {\n      return {\n        'publications': result.publications,\n        'epoch': result.epoch || '',\n        'offset': result.offset || 0\n      };\n    });\n  }\n\n  presence(channel) {\n    const msg = {\n      method: this._methodType.PRESENCE,\n      params: {\n        channel: channel\n      }\n    };\n    return this._methodCall(msg, function (result) {\n      return {\n        'presence': result.presence\n      };\n    });\n  }\n\n  presenceStats(channel) {\n    const msg = {\n      method: this._methodType.PRESENCE_STATS,\n      params: {\n        channel: channel\n      }\n    };\n    return this._methodCall(msg, function (result) {\n      return {\n        'num_users': result.num_users,\n        'num_clients': result.num_clients\n      };\n    });\n  }\n\n  _dataReceived(data) {\n    const replies = this._decoder.decodeReplies(data);\n    // we have to guarantee order of events in replies processing - i.e. start processing\n    // next reply only when we finished processing of current one. Without syncing things in\n    // this way we could get wrong publication events order as reply promises resolve\n    // on next loop tick so for loop continues before we finished emitting all reply events.\n    this._dispatchPromise = this._dispatchPromise.then(() => {\n      let finishDispatch;\n      this._dispatchPromise = new Promise(resolve =>{\n        finishDispatch = resolve;\n      });\n      this._dispatchSynchronized(replies, finishDispatch);\n    });\n    this._restartPing();\n  }\n\n  _hookMiddleware(data) {\n    const {middleware} = this._config;\n    if (Array.isArray(middleware)) {\n      middleware.forEach(mw => {\n        if (typeof mw === 'function') {\n          mw(data);\n        }\n      });\n    }\n\n    if (typeof middleware === 'function') {\n      middleware(data);\n    }\n  }\n\n  _dispatchSynchronized(replies, finishDispatch) {\n    let p = Promise.resolve();\n    for (const i in replies) {\n      if (replies.hasOwnProperty(i)) {\n        p = p.then(() => {\n          this._hookMiddleware(replies[i]);\n          return this._dispatchReply(replies[i]);\n        });\n      }\n    }\n    p = p.then(() => {\n      finishDispatch();\n    });\n  }\n\n  _dispatchReply(reply) {\n    var next;\n    const p = new Promise(resolve =>{\n      next = resolve;\n    });\n\n    if (reply === undefined || reply === null) {\n      this._debug('dispatch: got undefined or null reply');\n      next();\n      return p;\n    }\n\n    const id = reply.id;\n\n    if (id && id > 0) {\n      this._handleReply(reply, next);\n    } else {\n      this._handlePush(reply.result, next);\n    }\n\n    return p;\n  };\n\n  _call(msg) {\n    return new Promise((resolve, reject) => {\n      const id = this._addMessage(msg);\n      this._registerCall(id, resolve, reject);\n    });\n  }\n\n  _connect() {\n    if (this.isConnected()) {\n      this._debug('connect called when already connected');\n      return;\n    }\n    if (this._status === 'connecting') {\n      return;\n    }\n\n    this._debug('start connecting');\n    this._setStatus('connecting');\n    this._clientID = null;\n    this._reconnect = true;\n    this._setupTransport();\n  };\n\n  _disconnect(reason, shouldReconnect) {\n\n    const reconnect = shouldReconnect || false;\n    if (reconnect === false) {\n      this._reconnect = false;\n    }\n\n    if (this._isDisconnected()) {\n      if (!reconnect) {\n        this._clearConnectedState(reconnect);\n      }\n      return;\n    }\n\n    this._clearConnectedState(reconnect);\n\n    this._debug('disconnected:', reason, shouldReconnect);\n    this._setStatus('disconnected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (this._reconnecting === false) {\n      // fire unsubscribe events for server side subs.\n      for (const channel in this._serverSubs) {\n        if (this._serverSubs.hasOwnProperty(channel)) {\n          this.emit('unsubscribe', {channel: channel});\n        }\n      }\n      this.emit('disconnect', {\n        reason: reason,\n        reconnect: reconnect\n      });\n    }\n\n    if (reconnect === false) {\n      this._subs = {};\n      this._serverSubs = {};\n    }\n\n    if (!this._transportClosed) {\n      this._transport.close();\n    }\n  };\n\n  _refreshFailed() {\n    this._numRefreshFailed = 0;\n    if (!this._isDisconnected()) {\n      this._disconnect('refresh failed', false);\n    }\n    if (this._config.onRefreshFailed !== null) {\n      this._config.onRefreshFailed();\n    }\n  };\n\n  _refresh() {\n    // ask application for new connection token.\n    this._debug('refresh token');\n\n    if (this._config.refreshAttempts === 0) {\n      this._debug('refresh attempts set to 0, do not send refresh request at all');\n      this._refreshFailed();\n      return;\n    }\n\n    if (this._refreshTimeout !== null) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        // We don't perform any connection status related actions here as we are\n        // relying on server that must close connection eventually.\n        if (resp.error) {\n          this._debug('error refreshing connection token', resp.error);\n        } else {\n          this._debug('error refreshing connection token: wrong status code', resp.status);\n        }\n        this._numRefreshFailed++;\n        if (this._refreshTimeout !== null) {\n          clearTimeout(this._refreshTimeout);\n          this._refreshTimeout = null;\n        }\n        if (this._config.refreshAttempts !== null && this._numRefreshFailed >= this._config.refreshAttempts) {\n          this._refreshFailed();\n          return;\n        }\n        const jitter = Math.round(Math.random() * 1000 * Math.max(this._numRefreshFailed, 20));\n        const interval = this._config.refreshInterval + jitter;\n        this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n        return;\n      }\n      this._numRefreshFailed = 0;\n      this._token = resp.data.token;\n      if (!this._token) {\n        this._refreshFailed();\n        return;\n      }\n      if (this._isDisconnected() && this._reconnect) {\n        this._debug('token refreshed, connect from scratch');\n        this._connect();\n      } else {\n        this._debug('send refreshed token');\n        const msg = {\n          method: this._methodType.REFRESH,\n          params: {\n            token: this._token\n          }\n        };\n        this._call(msg).then(resolveCtx => {\n          this._refreshResponse(this._decoder.decodeCommandResult(this._methodType.REFRESH, resolveCtx.result));\n          if (resolveCtx.next) {\n            resolveCtx.next();\n          }\n        }, rejectCtx => {\n          this._refreshError(rejectCtx.error);\n          if (rejectCtx.next) {\n            rejectCtx.next();\n          }\n        });\n      }\n    };\n\n    if (this._config.onRefresh !== null) {\n      const context = {};\n      this._config.onRefresh(context, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.refreshEndpoint,\n        this._config.refreshParams,\n        this._config.refreshHeaders,\n        this._config.refreshData,\n        cb\n      );\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _refreshError(err) {\n    this._debug('refresh error', err);\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    const interval = this._config.refreshInterval + Math.round(Math.random() * 1000);\n    this._refreshTimeout = setTimeout(() => this._refresh(), interval);\n  }\n\n  _refreshResponse(result) {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n      this._refreshTimeout = null;\n    }\n    if (result.expires) {\n      this._clientID = result.client;\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n  };\n\n  _newXHRID() {\n    this._xhrID++;\n    return this._xhrID;\n  }\n\n  _subRefresh(channel) {\n    this._debug('refresh subscription token for channel', channel);\n\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      this._clearSubRefreshTimeout(channel);\n    } else {\n      return;\n    }\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (resp.error || resp.status !== 200 || this._clientID !== clientID) {\n        return;\n      }\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      const token = channelsData[channel];\n      if (!token) {\n        return;\n      }\n      const msg = {\n        method: this._methodType.SUB_REFRESH,\n        params: {\n          channel: channel,\n          token: token\n        }\n      };\n\n      const sub = this._getSub(channel);\n      if (sub === null) {\n        return;\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subRefreshResponse(\n          channel,\n          this._decoder.decodeCommandResult(this._methodType.SUB_REFRESH, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subRefreshError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    };\n\n    const data = {\n      client: this._clientID,\n      channels: [channel]\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  _clearSubRefreshTimeout(channel) {\n    if (this._subRefreshTimeouts[channel] !== undefined) {\n      clearTimeout(this._subRefreshTimeouts[channel]);\n      delete this._subRefreshTimeouts[channel];\n    }\n  }\n\n  _subRefreshError(channel, err) {\n    this._debug('subscription refresh error', channel, err);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    const jitter = Math.round(Math.random() * 1000);\n    let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._config.subRefreshInterval + jitter);\n    this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    return;\n  }\n\n  _subRefreshResponse(channel, result) {\n    this._debug('subscription refresh success', channel);\n    this._clearSubRefreshTimeout(channel);\n    const sub = this._getSub(channel);\n    if (sub === null) {\n      return;\n    }\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n    return;\n  };\n\n  _subscribe(sub, isResubscribe) {\n    this._debug('subscribing on', sub.channel);\n    const channel = sub.channel;\n\n    if (!(channel in this._subs)) {\n      this._subs[channel] = sub;\n    }\n\n    if (!this.isConnected()) {\n      // subscribe will be called later\n      sub._setNew();\n      return;\n    }\n\n    sub._setSubscribing(isResubscribe);\n\n    const msg = {\n      method: this._methodType.SUBSCRIBE,\n      params: {\n        channel: channel\n      }\n    };\n\n    // If channel name does not start with privateChannelPrefix - then we\n    // can just send subscription message to Centrifuge. If channel name\n    // starts with privateChannelPrefix - then this is a private channel\n    // and we should ask web application backend for permission first.\n    if (startsWith(channel, this._config.privateChannelPrefix)) {\n      // private channel.\n      if (this._isSubscribeBatching) {\n        this._privateChannels[channel] = true;\n      } else {\n        this.startSubscribeBatching();\n        this._subscribe(sub);\n        this.stopSubscribeBatching();\n      }\n    } else {\n      const recover = sub._needRecover();\n\n      if (recover === true) {\n        msg.params.recover = true;\n        const seq = this._getLastSeq(channel);\n        const gen = this._getLastGen(channel);\n        if (seq || gen) {\n          if (seq) {\n            msg.params.seq = seq;\n          }\n          if (gen) {\n            msg.params.gen = gen;\n          }\n        } else {\n          const offset = this._getLastOffset(channel);\n          if (offset) {\n            msg.params.offset = offset;\n          }\n        }\n        const epoch = this._getLastEpoch(channel);\n        if (epoch) {\n          msg.params.epoch = epoch;\n        }\n      }\n\n      this._call(msg).then(resolveCtx => {\n        this._subscribeResponse(\n          channel,\n          recover,\n          this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n        );\n        if (resolveCtx.next) {\n          resolveCtx.next();\n        }\n      }, rejectCtx => {\n        this._subscribeError(channel, rejectCtx.error);\n        if (rejectCtx.next) {\n          rejectCtx.next();\n        }\n      });\n    }\n  };\n\n  _unsubscribe(sub) {\n    delete this._subs[sub.channel];\n    delete this._lastOffset[sub.channel];\n    delete this._lastSeq[sub.channel];\n    delete this._lastGen[sub.channel];\n    if (this.isConnected()) {\n      // No need to unsubscribe in disconnected state - i.e. client already unsubscribed.\n      this._addMessage({\n        method: this._methodType.UNSUBSCRIBE,\n        params: {\n          channel: sub.channel\n        }\n      });\n    }\n  };\n\n  _getTTLMilliseconds(ttl) {\n    // https://stackoverflow.com/questions/12633405/what-is-the-maximum-delay-for-setinterval\n    return Math.min(ttl * 1000, 2147483647);\n  }\n\n  getSub(channel) {\n    return this._getSub(channel);\n  }\n\n  _getSub(channel) {\n    const sub = this._subs[channel];\n    if (!sub) {\n      return null;\n    }\n    return sub;\n  };\n\n  _isServerSub(channel) {\n    return this._serverSubs[channel] !== undefined;\n  };\n\n  _connectResponse(result, isRecover) {\n    const wasReconnecting = this._reconnecting;\n    this._reconnecting = false;\n    this._resetRetry();\n    this._refreshRequired = false;\n\n    if (this.isConnected()) {\n      return;\n    }\n\n    if (this._latencyStart !== null) {\n      this._latency = (new Date()).getTime() - this._latencyStart.getTime();\n      this._latencyStart = null;\n    }\n\n    this._clientID = result.client;\n    this._setStatus('connected');\n\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n\n    if (result.expires) {\n      this._refreshTimeout = setTimeout(() => this._refresh(), this._getTTLMilliseconds(result.ttl));\n    }\n\n    this.startBatching();\n    this.startSubscribeBatching();\n    for (const channel in this._subs) {\n      if (this._subs.hasOwnProperty(channel)) {\n        const sub = this._subs[channel];\n        if (sub._shouldResubscribe()) {\n          this._subscribe(sub, wasReconnecting);\n        }\n      }\n    }\n    this.stopSubscribeBatching();\n    this.stopBatching();\n\n    this._startPing();\n\n    const ctx = {\n      client: result.client,\n      transport: this._transportName,\n      latency: this._latency\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n\n    this.emit('connect', ctx);\n\n    if (result.subs) {\n      this._processServerSubs(result.subs);\n    }\n  };\n\n  _processServerSubs(subs) {\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        const isResubscribe = this._serverSubs[channel] !== undefined;\n        let subCtx = {channel: channel, isResubscribe: isResubscribe};\n        subCtx = this._expandSubscribeContext(subCtx, sub);\n        this.emit('subscribe', subCtx);\n      }\n    }\n    for (const channel in subs) {\n      if (subs.hasOwnProperty(channel)) {\n        const sub = subs[channel];\n        if (sub.recovered) {\n          let pubs = sub.publications;\n          if (pubs && pubs.length > 0) {\n\n            // handle legacy order.\n            // TODO: remove as soon as Centrifuge v1 released.\n            if (pubs.length > 1 && (!pubs[0].offset || pubs[0].offset > pubs[1].offset)) {\n              pubs = pubs.reverse();\n            }\n\n            for (let i in pubs) {\n              if (pubs.hasOwnProperty(i)) {\n                this._handlePublication(channel, pubs[i]);\n              }\n            }\n          }\n        }\n        this._serverSubs[channel] = {\n          'seq': sub.seq,\n          'gen': sub.gen,\n          'offset': sub.offset,\n          'epoch': sub.epoch,\n          'recoverable': sub.recoverable\n        };\n      }\n    }\n  };\n\n  _stopPing() {\n    if (this._pongTimeout !== null) {\n      clearTimeout(this._pongTimeout);\n      this._pongTimeout = null;\n    }\n    if (this._pingTimeout !== null) {\n      clearTimeout(this._pingTimeout);\n      this._pingTimeout = null;\n    }\n  };\n\n  _startPing() {\n    if (this._config.ping !== true || this._config.pingInterval <= 0) {\n      return;\n    }\n    if (!this.isConnected()) {\n      return;\n    }\n\n    this._pingTimeout = setTimeout(() => {\n      if (!this.isConnected()) {\n        this._stopPing();\n        return;\n      }\n      this.ping();\n      this._pongTimeout = setTimeout(() => {\n        this._disconnect('no ping', true);\n      }, this._config.pongWaitTimeout);\n    }, this._config.pingInterval);\n  };\n\n  _restartPing() {\n    this._stopPing();\n    this._startPing();\n  };\n\n  _subscribeError(channel, error) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    if (error.code === 0 && error.message === _errorTimeout) { // client side timeout.\n      this._disconnect('timeout', true);\n      return;\n    }\n    sub._setSubscribeError(error);\n  };\n\n  _expandSubscribeContext(ctx, result) {\n    let recovered = false;\n    if ('recovered' in result) {\n      recovered = result.recovered;\n    }\n    ctx.recovered = recovered;\n\n    let positioned = false;\n    if ('positioned' in result) {\n      positioned = result.positioned;\n    }\n    let epoch = '';\n    if ('epoch' in result) {\n      epoch = result.epoch;\n    }\n    let offset = 0;\n    if ('offset' in result) {\n      offset = result.offset;\n    }\n    if (positioned) {\n      ctx.streamPosition = {\n        'offset': offset,\n        'epoch': epoch\n      };\n    };\n    if (result.data) {\n      ctx.data = result.data;\n    }\n    return ctx;\n  }\n\n  _subscribeResponse(channel, isRecover, result) {\n    const sub = this._getSub(channel);\n    if (!sub) {\n      return;\n    }\n    if (!sub._isSubscribing()) {\n      return;\n    }\n    sub._setSubscribeSuccess(result);\n\n    let pubs = result.publications;\n    if (pubs && pubs.length > 0) {\n      if (pubs.length >= 2 && !pubs[0].offset && !pubs[1].offset) {\n        // handle legacy order.\n        pubs = pubs.reverse();\n      }\n      for (let i in pubs) {\n        if (pubs.hasOwnProperty(i)) {\n          this._handlePublication(channel, pubs[i]);\n        }\n      }\n    }\n\n    if (result.recoverable && (!isRecover || !result.recovered)) {\n      this._lastSeq[channel] = result.seq || 0;\n      this._lastGen[channel] = result.gen || 0;\n      this._lastOffset[channel] = result.offset || 0;\n    }\n\n    this._lastEpoch[channel] = result.epoch || '';\n\n    if (result.recoverable) {\n      sub._recoverable = true;\n    }\n\n    if (result.expires === true) {\n      let subRefreshTimeout = setTimeout(() => this._subRefresh(channel), this._getTTLMilliseconds(result.ttl));\n      this._subRefreshTimeouts[channel] = subRefreshTimeout;\n    }\n  };\n\n  _handleReply(reply, next) {\n    const id = reply.id;\n    const result = reply.result;\n\n    if (!(id in this._callbacks)) {\n      next();\n      return;\n    }\n    const callbacks = this._callbacks[id];\n    clearTimeout(this._callbacks[id].timeout);\n    delete this._callbacks[id];\n\n    if (!errorExists(reply)) {\n      const callback = callbacks.callback;\n      if (!callback) {\n        return;\n      }\n      callback({result, next});\n    } else {\n      const errback = callbacks.errback;\n      if (!errback) {\n        next();\n        return;\n      }\n      const error = reply.error;\n      errback({error, next});\n    }\n  }\n\n  _handleJoin(channel, join) {\n    const ctx = {'info': join.info};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('join', ctx);\n      }\n      return;\n    }\n    sub.emit('join', ctx);\n  };\n\n  _handleLeave(channel, leave) {\n    const ctx = {'info': leave.info};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        ctx.channel = channel;\n        this.emit('leave', ctx);\n      }\n      return;\n    }\n    sub.emit('leave', ctx);\n  };\n\n  _handleUnsub(channel, unsub) {\n    const ctx = {};\n    const sub = this._getSub(channel);\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        delete this._serverSubs[channel];\n        ctx.channel = channel;\n        this.emit('unsubscribe', ctx);\n      }\n      return;\n    }\n    sub.unsubscribe();\n    if (unsub.resubscribe === true) {\n      sub.subscribe();\n    }\n  };\n\n  _handleSub(channel, sub) {\n    this._serverSubs[channel] = {\n      'seq': sub.seq,\n      'gen': sub.gen,\n      'offset': sub.offset,\n      'epoch': sub.epoch,\n      'recoverable': sub.recoverable\n    };\n    let ctx = {'channel': channel, isResubscribe: false};\n    ctx = this._expandSubscribeContext(ctx, sub);\n    this.emit('subscribe', ctx);\n  };\n\n  _handlePublication(channel, pub) {\n    const sub = this._getSub(channel);\n    const ctx = {\n      'data': pub.data,\n      'seq': pub.seq,\n      'gen': pub.gen,\n      'offset': pub.offset\n    };\n    if (pub.info) {\n      ctx.info = pub.info;\n    }\n    if (!sub) {\n      if (this._isServerSub(channel)) {\n        if (pub.seq !== undefined) {\n          this._serverSubs[channel].seq = pub.seq;\n        }\n        if (pub.gen !== undefined) {\n          this._serverSubs[channel].gen = pub.gen;\n        }\n        if (pub.offset !== undefined) {\n          this._serverSubs[channel].offset = pub.offset;\n        }\n        ctx.channel = channel;\n        this.emit('publish', ctx);\n      }\n      return;\n    }\n    if (pub.seq !== undefined) {\n      this._lastSeq[channel] = pub.seq;\n    }\n    if (pub.gen !== undefined) {\n      this._lastGen[channel] = pub.gen;\n    }\n    if (pub.offset !== undefined) {\n      this._lastOffset[channel] = pub.offset;\n    }\n    sub.emit('publish', ctx);\n  };\n\n  _handleMessage(message) {\n    this.emit('message', message.data);\n  };\n\n  _handlePush(data, next) {\n    const push = this._decoder.decodePush(data);\n    let type = 0;\n    if ('type' in push) {\n      type = push['type'];\n    }\n    const channel = push.channel;\n\n    if (type === this._pushType.PUBLICATION) {\n      const pub = this._decoder.decodePushData(this._pushType.PUBLICATION, push.data);\n      this._handlePublication(channel, pub);\n    } else if (type === this._pushType.MESSAGE) {\n      const message = this._decoder.decodePushData(this._pushType.MESSAGE, push.data);\n      this._handleMessage(message);\n    } else if (type === this._pushType.JOIN) {\n      const join = this._decoder.decodePushData(this._pushType.JOIN, push.data);\n      this._handleJoin(channel, join);\n    } else if (type === this._pushType.LEAVE) {\n      const leave = this._decoder.decodePushData(this._pushType.LEAVE, push.data);\n      this._handleLeave(channel, leave);\n    } else if (type === this._pushType.UNSUB) {\n      const unsub = this._decoder.decodePushData(this._pushType.UNSUB, push.data);\n      this._handleUnsub(channel, unsub);\n    } else if (type === this._pushType.SUB) {\n      const sub = this._decoder.decodePushData(this._pushType.SUB, push.data);\n      this._handleSub(channel, sub);\n    }\n    next();\n  }\n\n  _flush() {\n    const messages = this._messages.slice(0);\n    this._messages = [];\n    this._transportSend(messages);\n  };\n\n  _ping() {\n    const msg = {\n      method: this._methodType.PING\n    };\n    this._call(msg).then(resolveCtx => {\n      this._pingResponse(this._decoder.decodeCommandResult(this._methodType.PING, resolveCtx.result));\n      if (resolveCtx.next) {\n        resolveCtx.next();\n      }\n    }, rejectCtx => {\n      this._debug('ping error', rejectCtx.error);\n      if (rejectCtx.next) {\n        rejectCtx.next();\n      }\n    });\n  };\n\n  _pingResponse(result) {\n    if (!this.isConnected()) {\n      return;\n    }\n    this._stopPing();\n    this._startPing();\n  }\n\n  _getLastSeq(channel) {\n    const lastSeq = this._lastSeq[channel];\n    if (lastSeq) {\n      return lastSeq;\n    }\n    return 0;\n  };\n\n  _getLastOffset(channel) {\n    const lastOffset = this._lastOffset[channel];\n    if (lastOffset) {\n      return lastOffset;\n    }\n    return 0;\n  };\n\n  _getLastGen(channel) {\n    const lastGen = this._lastGen[channel];\n    if (lastGen) {\n      return lastGen;\n    }\n    return 0;\n  };\n\n  _getLastEpoch(channel) {\n    const lastEpoch = this._lastEpoch[channel];\n    if (lastEpoch) {\n      return lastEpoch;\n    }\n    return '';\n  };\n\n  _createErrorObject(message, code) {\n    const errObject = {\n      message: message,\n      code: code || 0\n    };\n\n    return errObject;\n  };\n\n  _registerCall(id, callback, errback) {\n    this._callbacks[id] = {\n      callback: callback,\n      errback: errback,\n      timeout: null\n    };\n    this._callbacks[id].timeout = setTimeout(() => {\n      delete this._callbacks[id];\n      if (isFunction(errback)) {\n        errback({error: this._createErrorObject(_errorTimeout)});\n      }\n    }, this._config.timeout);\n  };\n\n  _addMessage(message) {\n    let id = this._nextMessageId();\n    message.id = id;\n    if (this._isBatching === true) {\n      this._messages.push(message);\n    } else {\n      this._transportSend([message]);\n    }\n    return id;\n  };\n\n  isConnected() {\n    return this._isConnected();\n  }\n\n  connect() {\n    this._connect();\n  };\n\n  disconnect() {\n    this._disconnect('client', false);\n  };\n\n  ping() {\n    return this._ping();\n  }\n\n  startBatching() {\n    // start collecting messages without sending them to Centrifuge until flush\n    // method called\n    this._isBatching = true;\n  };\n\n  stopBatching() {\n    this._isBatching = false;\n    this._flush();\n  };\n\n  startSubscribeBatching() {\n    // start collecting private channels to create bulk authentication\n    // request to subscribeEndpoint when stopSubscribeBatching will be called\n    this._isSubscribeBatching = true;\n  };\n\n  stopSubscribeBatching() {\n    // create request to subscribeEndpoint with collected private channels\n    // to ask if this client can subscribe on each channel\n    this._isSubscribeBatching = false;\n    const authChannels = this._privateChannels;\n    this._privateChannels = {};\n\n    const channels = [];\n\n    for (const channel in authChannels) {\n      if (authChannels.hasOwnProperty(channel)) {\n        const sub = this._getSub(channel);\n        if (!sub) {\n          continue;\n        }\n        channels.push(channel);\n      }\n    }\n\n    if (channels.length === 0) {\n      this._debug('no private channels found, no need to make request');\n      return;\n    }\n\n    const data = {\n      client: this._clientID,\n      channels: channels\n    };\n\n    const clientID = this._clientID;\n    const xhrID = this._newXHRID();\n\n    const cb = (resp) => {\n      if (xhrID in this._xhrs) {\n        delete this._xhrs[xhrID];\n      }\n      if (this._clientID !== clientID) {\n        return;\n      }\n      if (resp.error || resp.status !== 200) {\n        this._debug('authorization request failed');\n        for (const i in channels) {\n          if (channels.hasOwnProperty(i)) {\n            const channel = channels[i];\n            this._subscribeError(channel, this._createErrorObject('authorization request failed'));\n          }\n        }\n        return;\n      }\n\n      let channelsData = {};\n      if (resp.data.channels) {\n        for (const i in resp.data.channels) {\n          const channelData = resp.data.channels[i];\n          if (!channelData.channel) {\n            continue;\n          }\n          channelsData[channelData.channel] = channelData.token;\n        }\n      }\n\n      // try to send all subscriptions in one request.\n      let batch = false;\n\n      if (!this._isBatching) {\n        this.startBatching();\n        batch = true;\n      }\n\n      for (const i in channels) {\n        if (channels.hasOwnProperty(i)) {\n          const channel = channels[i];\n          const token = channelsData[channel];\n\n          if (!token) {\n            // subscription:error\n            this._subscribeError(channel, this._createErrorObject('permission denied', 103));\n            continue;\n          } else {\n            const msg = {\n              method: this._methodType.SUBSCRIBE,\n              params: {\n                channel: channel,\n                token: token\n              }\n            };\n\n            const sub = this._getSub(channel);\n            if (sub === null) {\n              continue;\n            }\n\n            const recover = sub._needRecover();\n\n            if (recover === true) {\n              msg.params.recover = true;\n              const seq = this._getLastSeq(channel);\n              const gen = this._getLastGen(channel);\n              if (seq || gen) {\n                if (seq) {\n                  msg.params.seq = seq;\n                }\n                if (gen) {\n                  msg.params.gen = gen;\n                }\n              } else {\n                const offset = this._getLastOffset(channel);\n                if (offset) {\n                  msg.params.offset = offset;\n                }\n              }\n              const epoch = this._getLastEpoch(channel);\n              if (epoch) {\n                msg.params.epoch = epoch;\n              }\n            }\n            this._call(msg).then(resolveCtx => {\n              this._subscribeResponse(\n                channel,\n                recover,\n                this._decoder.decodeCommandResult(this._methodType.SUBSCRIBE, resolveCtx.result)\n              );\n              if (resolveCtx.next) {\n                resolveCtx.next();\n              }\n            }, rejectCtx => {\n              this._subscribeError(channel, rejectCtx.error);\n              if (rejectCtx.next) {\n                rejectCtx.next();\n              }\n            });\n          }\n        }\n      }\n\n      if (batch) {\n        this.stopBatching();\n      }\n\n    };\n\n    if (this._config.onPrivateSubscribe !== null) {\n      this._config.onPrivateSubscribe({\n        data: data\n      }, cb);\n    } else {\n      const xhr = this._ajax(\n        this._config.subscribeEndpoint, this._config.subscribeParams, this._config.subscribeHeaders, data, cb);\n      this._xhrs[xhrID] = xhr;\n    }\n  };\n\n  subscribe(channel, events) {\n    const currentSub = this._getSub(channel);\n    if (currentSub !== null) {\n      currentSub._setEvents(events);\n      if (currentSub._isUnsubscribed()) {\n        currentSub.subscribe();\n      }\n      return currentSub;\n    }\n    const sub = new Subscription(this, channel, events);\n    this._subs[channel] = sub;\n    sub.subscribe();\n    return sub;\n  };\n}\n","import {Centrifuge} from './centrifuge.js';\nexport default Centrifuge;\n","export const JsonMethodType = {\n  CONNECT: 0,\n  SUBSCRIBE: 1,\n  UNSUBSCRIBE: 2,\n  PUBLISH: 3,\n  PRESENCE: 4,\n  PRESENCE_STATS: 5,\n  HISTORY: 6,\n  PING: 7,\n  SEND: 8,\n  RPC: 9,\n  REFRESH: 10,\n  SUB_REFRESH: 11\n};\n\nexport const JsonPushType = {\n  PUBLICATION: 0,\n  JOIN: 1,\n  LEAVE: 2,\n  UNSUB: 3,\n  MESSAGE: 4,\n  SUB: 5\n};\n\nexport class JsonEncoder {\n  encodeCommands(commands) {\n    return commands.map(c => JSON.stringify(c)).join('\\n');\n  }\n}\n\nexport class JsonDecoder {\n  decodeReplies(data) {\n    return data.split('\\n').filter(r => r !== '').map(r => JSON.parse(r));\n  }\n\n  decodeCommandResult(methodType, data) {\n    return data;\n  }\n\n  decodePush(data) {\n    return data;\n  }\n\n  decodePushData(pushType, data) {\n    return data;\n  }\n}\n\n","import EventEmitter from 'events';\n\nimport {\n  isFunction\n} from './utils';\n\nconst _STATE_NEW = 0;\nconst _STATE_SUBSCRIBING = 1;\nconst _STATE_SUCCESS = 2;\nconst _STATE_ERROR = 3;\nconst _STATE_UNSUBSCRIBED = 4;\n\nexport default class Subscription extends EventEmitter {\n  constructor(centrifuge, channel, events) {\n    super();\n    this.channel = channel;\n    this._centrifuge = centrifuge;\n    this._status = _STATE_NEW;\n    this._error = null;\n    this._isResubscribe = false;\n    this._ready = false;\n    this._subscriptionPromise = null;\n    this._noResubscribe = false;\n    this._recoverable = false;\n    this._recover = false;\n    this._setEvents(events);\n    this._initializePromise();\n    this._promises = {};\n    this._promiseId = 0;\n    this.on('error', function (errContext) {\n      this._centrifuge._debug('subscription error', errContext);\n    });\n  }\n\n  _nextPromiseId() {\n    return ++this._promiseId;\n  }\n\n  _initializePromise() {\n    // this helps us to wait until subscription will successfully\n    // subscribe and call actions such as presence, history etc in\n    // synchronous way.\n    this._ready = false;\n\n    this._subscriptionPromise = new Promise((resolve, reject) => {\n      this._resolve = value => {\n        this._ready = true;\n        resolve(value);\n      };\n      this._reject = err => {\n        this._ready = true;\n        reject(err);\n      };\n    }).then(function () {}, function () {});\n  };\n\n  _needRecover() {\n    return this._recoverable === true && this._recover === true;\n  };\n\n  _setEvents(events) {\n    if (!events) {\n      return;\n    }\n    if (isFunction(events)) {\n      // events is just a function to handle publication received from channel.\n      this.on('publish', events);\n    } else if (Object.prototype.toString.call(events) === Object.prototype.toString.call({})) {\n      const knownEvents = ['publish', 'join', 'leave', 'unsubscribe', 'subscribe', 'error'];\n      for (let i = 0, l = knownEvents.length; i < l; i++) {\n        const ev = knownEvents[i];\n        if (ev in events) {\n          this.on(ev, events[ev]);\n        }\n      }\n    }\n  };\n\n  _isNew() {\n    return this._status === _STATE_NEW;\n  };\n\n  _isUnsubscribed() {\n    return this._status === _STATE_UNSUBSCRIBED;\n  };\n\n  _isSubscribing() {\n    return this._status === _STATE_SUBSCRIBING;\n  };\n\n  _isReady() {\n    return this._status === _STATE_SUCCESS || this._status === _STATE_ERROR;\n  };\n\n  _isSuccess() {\n    return this._status === _STATE_SUCCESS;\n  };\n\n  _isError() {\n    return this._status === _STATE_ERROR;\n  };\n\n  _setNew() {\n    this._status = _STATE_NEW;\n  };\n\n  _setSubscribing(isResubscribe) {\n    this._isResubscribe = isResubscribe || false;\n    if (this._ready === true) {\n      // new promise for this subscription\n      this._initializePromise();\n    }\n    this._status = _STATE_SUBSCRIBING;\n  };\n\n  _setSubscribeSuccess(subscribeResult) {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._status = _STATE_SUCCESS;\n    const successContext = this._getSubscribeSuccessContext(subscribeResult);\n    this._recover = false;\n    this.emit('subscribe', successContext);\n    this._resolve(successContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].resolve();\n      delete this._promises[id];\n    }\n  };\n\n  _setSubscribeError(err) {\n    if (this._status === _STATE_ERROR) {\n      return;\n    }\n    this._status = _STATE_ERROR;\n    this._error = err;\n    const errContext = this._getSubscribeErrorContext();\n    this.emit('error', errContext);\n    this._reject(errContext);\n    for (const id in this._promises) {\n      clearTimeout(this._promises[id].timeout);\n      this._promises[id].reject(err);\n      delete this._promises[id];\n    }\n  };\n\n  _triggerUnsubscribe() {\n    this.emit('unsubscribe', {\n      channel: this.channel\n    });\n  };\n\n  _setUnsubscribed(noResubscribe) {\n    this._centrifuge._clearSubRefreshTimeout(this.channel);\n    if (this._status === _STATE_UNSUBSCRIBED) {\n      return;\n    }\n    const needTrigger = this._status === _STATE_SUCCESS;\n    this._status = _STATE_UNSUBSCRIBED;\n    if (noResubscribe === true) {\n      this._recover = false;\n      this._noResubscribe = true;\n      delete this._centrifuge._lastSeq[this.channel];\n      delete this._centrifuge._lastGen[this.channel];\n      delete this._centrifuge._lastEpoch[this.channel];\n    }\n    if (needTrigger) {\n      this._triggerUnsubscribe();\n    }\n  };\n\n  _shouldResubscribe() {\n    return !this._noResubscribe;\n  };\n\n  _getSubscribeSuccessContext(subscribeResult) {\n    let ctx = {\n      channel: this.channel,\n      isResubscribe: this._isResubscribe\n    };\n    if (subscribeResult) {\n      // subscribeResult not available when called from Subscription.ready method at the moment.\n      ctx = this._centrifuge._expandSubscribeContext(ctx, subscribeResult);\n    }\n    return ctx;\n  };\n\n  _getSubscribeErrorContext() {\n    const subscribeErrorContext = this._error;\n    subscribeErrorContext.channel = this.channel;\n    subscribeErrorContext.isResubscribe = this._isResubscribe;\n    return subscribeErrorContext;\n  };\n\n  ready(callback, errback) {\n    if (this._ready) {\n      if (this._isSuccess()) {\n        callback(this._getSubscribeSuccessContext());\n      } else {\n        errback(this._getSubscribeErrorContext());\n      }\n    }\n  };\n\n  subscribe() {\n    if (this._status === _STATE_SUCCESS) {\n      return;\n    }\n    this._noResubscribe = false;\n    this._centrifuge._subscribe(this);\n  };\n\n  unsubscribe() {\n    this._setUnsubscribed(true);\n    this._centrifuge._unsubscribe(this);\n  };\n\n  _methodCall() {\n    if (this._isSuccess()) {\n      return Promise.resolve();\n    } else if (this._isError()) {\n      return Promise.reject(this._error);\n    }\n    let subPromise = new Promise((res, rej) => {\n      const timeout = setTimeout(function () {\n        rej({'code': 0, 'message': 'timeout'});\n      }, this._centrifuge._config.timeout);\n      this._promises[this._nextPromiseId()] = {\n        timeout: timeout,\n        resolve: res,\n        reject: rej\n      };\n    });\n    return subPromise;\n  }\n\n  publish(data) {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.publish(self.channel, data);\n    });\n  };\n\n  presence() {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.presence(self.channel);\n    });\n  };\n\n  presenceStats() {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.presenceStats(self.channel);\n    });\n  };\n\n  history(options) {\n    const self = this;\n    return this._methodCall().then(function () {\n      return self._centrifuge.history(self.channel, options);\n    });\n  };\n}\n","export function startsWith(value, prefix) {\n  return value.lastIndexOf(prefix, 0) === 0;\n};\n\nexport function isFunction(value) {\n  if (value === undefined || value === null) {\n    return false;\n  }\n  return typeof value === 'function';\n};\n\nexport function log(level, args) {\n  if (global.console) {\n    const logger = global.console[level];\n\n    if (isFunction(logger)) {\n      logger.apply(global.console, args);\n    }\n  }\n};\n\nexport function backoff(step, min, max) {\n  const jitter = 0.5 * Math.random();\n  const interval = Math.min(max, min * Math.pow(2, step + 1));\n\n  return Math.floor((1 - jitter) * interval);\n};\n\nexport function errorExists(data) {\n  return 'error' in data && data.error !== null;\n};\n\nexport function extend(a, b) {\n  for (const key in b) {\n    if (b.hasOwnProperty(key)) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(579);\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"sourceRoot":""}